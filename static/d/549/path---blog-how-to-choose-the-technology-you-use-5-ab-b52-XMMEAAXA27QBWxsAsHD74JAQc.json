{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5b3614c28fa3e100bf7a8da5","slug":"how-to-choose-the-technology-you-use","title":"How to choose the technology you use","html":"<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><p>Building Personably has taught us a lot about how to choose the technology you work with. It’s easy to become overwhelmed by the choices available when creating a product, and it’s important not to get too distracted by the lure of using something new. Your goal as a startup is to ship features quickly, and your stack should enable you to do that. Here are some reflections on what we’ve learned.</p>\n<h2 id=\"usingnewtechcanbeablessingandacurse\">Using new tech can be a blessing and a curse</h2>\n<p>One of the attractions of working at a start-up is the chance to work on a greenfield project. There’s always a trendy new tool to use, and sometimes they can solve a real problem you’ve been struggling with. The teams releasing them can often be incredibly helpful and attentive to their users. On the flip-side, sometimes it can be difficult to keep up with churn as the technology you use gets updated.</p>\n<p>For example, when we began writing the Personably front-end, <a href=\"https://reactjs.org/\"><strong>React</strong></a> was the obvious choice. It was easy to work with and most of the big internet companies had adopted it. React is equally as attractive to us because of the community. The contributions in the React ecosystem means it’s rare that you encounter an unsolved problem today. We’ve used a wealth of different libraries designed for React, such as Facebook’s <a href=\"https://draftjs.org/\"><strong>Draft JS</strong></a> rich text editor. Contributors such as <a href=\"https://twitter.com/dan_abramov\">Dan Abramov</a> and <a href=\"https://twitter.com/ryanflorence\">Ryan Florence</a> help to teach and nurture the community. It’s also incredibly helpful to be able to read about how React is used for products serving millions of people, such as <a href=\"https://medium.com/netflix-techblog/crafting-a-high-performance-tv-user-interface-using-react-3350e5a6ad3b\">how Netflix build TV interfaces with React</a> or <a href=\"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\">how Twitter built a fast PWA with React</a>.</p>\n<p>On the other hand, it can be tricky to keep pace with the regular updates to the tools you use . When we began building Personably, we were using <a href=\"https://github.com/ReactTraining/react-router\"><strong>React Router</strong></a> V3 (having missed out on the two major versions that came before!). About six months in, React Router V4 was released. It was a major change, with a significantly different API. When changes like this come, our approach has been to delay a couple of months before taking the time to upgrade. This allows any initial bugs to be ironed out, and usually the documentation will mature over time. Similarly, our chosen GraphQL client for React, <a href=\"https://www.apollographql.com/docs/react/\"><strong>Apollo</strong></a>, released a significant update from version 1.0 to 2.0, and React itself introducing breaking changes from v15 to v16. An added difficulty of this can be stumbling across an issue/Stack Overflow post about a problem you’re working on, only to find the suggested answer references the old version. It can be difficult to keep up!</p>\n<h2 id=\"aimtogetgoodatassessingthetechyoucurrentlyuseandplantouse\">Aim to get good at assessing the tech you currently use and plan to use</h2>\n<p>Over time, as you develop your product, you’ll get a better intuition for assessing what you currently use and the new things you’re considering using. In the long-run, this will serve you much better than feeling tied to anything in particular. The feeling of mastering a tool is really rewarding, and can allow you to move quickly. But it’s also valuable to look at other options that could give you a boost.</p>\n<p>Some important questions we ask when looking at what we currently use:</p>\n<ul>\n<li>Is there anything else that would be better suited to the job?</li>\n<li>Does using this slow us down?</li>\n<li>Are we using this in the most effective way?</li>\n</ul>\n<p>Some important questions we ask when looking at something new:</p>\n<ul>\n<li>Is the benefit of adopting this going to outweigh the time spent learning to use it?</li>\n<li>Is there an active and supportive community behind it?</li>\n<li>Are other similar companies using this? Is there anything we can learn from their experience with it?</li>\n</ul>\n<p>As an example, when we started working with <a href=\"https://graphql.org/\"><strong>GraphQL</strong></a>, we needed to choose a GraphQL client to use with React. There were two obvious choices at this point: <a href=\"https://facebook.github.io/relay/\"><strong>Relay</strong></a> or <a href=\"https://www.apollographql.com/docs/react/\"><strong>Apollo</strong></a>. Given we were already using much of the Facebook stack, Relay would have seemed like the obvious choice. However, the documentation and the API were complicated, and it lacked much community support behind it. We needed to get up and running quickly, and Apollo felt much easier to work with. Over time, Apollo seems to have gone from strength to strength.</p>\n<p>Early on when starting Personably, we picked up <strong>Graphcool</strong> (as it was then called) as a backend-as-a-service. We were trying to put together an MVP quickly, allowing us to demonstrate our ideas and get a product out to users quickly. At first, this was a quick win for us. However, over time it became difficult to work with a BaaS. You lack control over how to manage your services, making workflows such as CI and CD difficult to implement. We began to consider other alternatives, such as building our own GraphQL server using <a href=\"https://github.com/apollographql/apollo-server\"><strong>Apollo Server</strong></a>. Luckily, Graphcool’s own roadmap kept pace with what we were looking for, and they switched their approach away from a BaaS. Their new offering, <a href=\"https://www.prisma.io/\"><strong>Prisma</strong></a>, lets us quickly generate a GraphQL API on top of a SQL database, whilst keeping control over our developer workflow.</p>\n<h2 id=\"ifyoudonthaveanytechnicaldebtyourenotmovingquicklyenough\">If you don’t have any technical debt, you’re not moving quickly enough</h2>\n<p>Whilst it can be frustrating when you’ve picked up lots of different tools, and you’re using lots of different services, avoid the temptation to try and find the “perfect stack”. Your focus as a start-up should be building new features that delight your users. If your technical debt prevents you from doing that, address it. Otherwise, keep moving. Your users don’t care how perfect your stack is.</p>\n<!--kg-card-end: markdown--><!--kg-card-end: markdown-->","published_at":"2018-06-29T17:34:09.000+01:00","updated_at":"2019-03-29T11:06:35.000+00:00","feature_image":"https://blog.personably.co/content/images/2018/06/david-clode-410073-unsplash.jpg","og_image":null,"twitter_image":null,"meta_title":"How to choose the technology you use","meta_description":"Building Personably has taught us a lot about how to choose the technology you work with. Here are some reflections on what we’ve learned.","tags":[{"id":"5a71f887b19a4500223c722d","slug":"engineering"},{"id":"59f34a560ee118002371a1c6","slug":"startups"}],"primary_author":{"name":"Lewis Blackwood","twitter":null},"primary_tag":{"id":"5a71f887b19a4500223c722d","name":"Engineering","slug":"engineering"},"authors":[{"id":"5b211e5ebdee4800bff9a86b","name":"Lewis Blackwood","slug":"lewis"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"how-to-choose-the-technology-you-use"}}